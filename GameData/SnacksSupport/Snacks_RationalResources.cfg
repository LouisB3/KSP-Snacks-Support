// Ore -> Snack converters instead use Hydrates (CRP) or Rock (WBI-CS)

@PART[*]:HAS[@MODULE[SnackProcessor]]:NEEDS[RationalResources,CommunityResourcePack,!ClassicStock]:LAST[Snacks]
{
  +MODULE[SnackProcessor],0
  {
    @ConverterName = Snack Processor [Hydrates]
		@StartActionName = Start Snack Processor [Hydrates]
		@StopActionName = Stop Snack Processor [Hydrates]
    @INPUT_RESOURCE:HAS[#ResourceName[Ore]]
    {
      @ResourceName = Hydrates
      @Ratio *= 3.33333333 // 2x efficient as Ore by mass (density is 15% of Ore)
    }
  }
}

@PART[*]:HAS[@MODULE[SnackProcessor]]:NEEDS[RationalResources,ClassicStock]:LAST[Snacks]
{
  +MODULE[SnackProcessor],0
  {
    @ConverterName = Snack Processor [Rock]
		@StartActionName = Start Snack Processor [Rock]
		@StopActionName = Stop Snack Processor [Rock]
    @INPUT_RESOURCE:HAS[#ResourceName[Ore]]
    {
      @ResourceName = Rock
      @Ratio *= 2 // 2x efficient as Ore by mass (density is 25% of Ore)
    }
  }
}

// Also do the same for alternate modules used by Role Overhaul patch

@PART[*]:HAS[@MODULE[SnacksConverter]]:NEEDS[RationalResources,CommunityResourcePack,!ClassicStock]:LAST[Snacks]
{
  +MODULE[SnacksConverter],0
  {
    @ConverterName = Soil Production [Hydrates]
		@StartActionName = Start Soil Production [Hydrates]
		@StopActionName = Stop Soil Production [Hydrates]
    @INPUT_RESOURCE:HAS[#ResourceName[Ore]]
    {
      @ResourceName = Hydrates
      @Ratio *= 3.33333333 // 2x efficient as Ore by mass (density is 15% of Ore)
    }
  }
}

@PART[*]:HAS[@MODULE[SnacksConverter]]:NEEDS[RationalResources,ClassicStock]:LAST[Snacks]
{
  +MODULE[SnacksConverter],0
  {
    @ConverterName = Soil Production [Rock]
		@StartActionName = Start Soil Production [Rock]
		@StopActionName = Stop Soil Production [Rock]
    @INPUT_RESOURCE:HAS[#ResourceName[Ore]]
    {
      @ResourceName = Rock
      @Ratio *= 2 // 2x efficient as Ore by mass (density is 25% of Ore)
    }
  }
}
